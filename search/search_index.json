{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Algorithm","text":"<p>\u6b22\u8fce\u6765\u5230\u7b97\u6cd5\u680f\u76ee\u3002</p>"},{"location":"CodeThinker/3/2022-06-07_3-1_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","title":"2022-06-07 3-1 \u4e8c\u5206\u67e5\u627e","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/3/2022-06-07_3-1_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_1","title":"\u4e8c\u5206\u6cd5\u524d\u63d0\u6761\u4ef6\uff1a","text":"<ol> <li>\u6709\u5e8f\u2014\u2014\u7b26\u5408\u4e8c\u5206\u6cd5\u7684\u903b\u8f91</li> <li>\u53bb\u91cd\u2014\u2014\u9632\u6b62\u8fd4\u56de\u7684 <code>index</code> \u4e0d\u552f\u4e00</li> </ol>"},{"location":"CodeThinker/3/2022-06-07_3-1_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_2","title":"\u4e8c\u5206\u6cd5\u4e24\u79cd\u5199\u6cd5\u7684\u5173\u952e\uff1a","text":"<p>\u4e24\u79cd\u5199\u6cd5\u7684\u4e0d\u540c\u70b9\u5728\u4e8e <code>target</code> \u5728\u95ed\u533a\u95f4\u8fd8\u662f\u5de6\u95ed\u53f3\u5f00\u3002</p> <ol> <li><code>while(left &lt; right)</code> \u5728 <code>[left, right]</code> \u533a\u95f4\u5185\u662f\u5426\u6709\u6548\uff1b</li> <li><code>nums[middle] &gt; right</code> \u65f6\uff0c\u5b9e\u9645\u6bd4\u8f83\u7684\u662f <code>nums[middle]</code> \u8fd8\u662f <code>nums[middle-1]</code> \u3002</li> </ol>"},{"location":"CodeThinker/3/2022-06-07_3-1_%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#pseudocode","title":"\u4e8c\u5206\u6cd5Pseudocode\uff1a","text":"<pre><code>BINARY-SEARCH (array arr, int index) \n    left = 0;\n    right = arr.size();\n    while (left &lt; right) {\n        int middle = left + ((right - left) / 2);\n        if (arr[middle] &gt; target) {\n            right = middle;\n        } else if (arrr[middle] &lt; target) {\n            left = middle;\n        } else {\n            return middle;\n        }\n    }\n    return -1;\n</code></pre>"},{"location":"CodeThinker/3/2022-06-08_3-2_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","title":"2022-06-08 3-2 \u79fb\u9664\u5143\u7d20","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink </p>"},{"location":"CodeThinker/3/2022-06-08_3-2_%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#_1","title":"\u53cc\u6307\u9488\u6cd5\uff08\u5feb\u6162\u6307\u9488\u6cd5\uff09","text":"<p>\u6548\u679c\uff1a\u901a\u8fc7\u4e00\u4e2a\u5feb\u6307\u9488\u548c\u4e00\u4e2a\u6162\u6307\u9488\u5728\u4e00\u4e2afor\u5faa\u73af\u5185\u5b8c\u6210\u4e24\u4e2afor\u5faa\u73af\u7684\u5de5\u4f5c</p> <p>\u8981\u70b9\uff1a</p> <ol> <li>\u5feb\u6307\u9488\u6700\u5927\u662f\u6570\u7ec4\u5927\u5c0f\uff0c\u6162\u6307\u9488\u6700\u5927\u60c5\u51b5\u4e0d\u4e00\u5b9a\uff1b</li> <li><code>val != nums[fastIndex]</code>\uff1a\u8ba9 <code>if</code> \u6765\u5224\u65ad\u4e0d\u7b49\u6bd4\u5224\u65ad\u7b49\u4e8e\u5b89\u5168\u6027\u9ad8\u4e00\u4e9b\uff1f </li> </ol>"},{"location":"CodeThinker/3/2022-06-09_3-3_%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E5%AD%90%E6%95%B0%E7%BB%84/","title":"2022-06-09 3-3 \u957f\u5ea6\u6700\u5c0f\u5b50\u6570\u7ec4","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/3/2022-06-09_3-3_%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E5%AD%90%E6%95%B0%E7%BB%84/#_1","title":"\u6ed1\u52a8\u7a97\u53e3\uff08\u53cc\u6307\u9488\u6cd5\u7684\u4e00\u79cd\uff09","text":"<p>\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5b83\u4f7f\u52a8\u6001\u904d\u5386\u6570\u7ec4\u53ea\u9700\u6ce8\u610f\u6570\u7ec4\u7684\u7ed3\u5c3e\u5143\u7d20\u7d22\u5f15\u800c\u628a\u5f00\u5934\u7684\u5143\u7d20\u7d22\u5f15\u878d\u5408\u8fdb\u4e86\u4e00\u4e2a\u5224\u65ad\u5206\u652f\u5185\u3002</p> <p>\u6211\u5728\u7f16\u7a0b\u4e0a\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u95ee\u9898\u70b9\uff1a<code>while</code> \u5faa\u73af\u5185\u7684\u5224\u65ad\u6761\u4ef6\u8981\u6ce8\u610f\u5ba1\u9898\uff0c\u4e0d\u8981\u60f3\u5f53\u7136\u3002</p>"},{"location":"CodeThinker/3/2022-06-10_3-4_%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F/","title":"2022-06-10 3-4 \u5faa\u73af\u4e0d\u53d8\u91cf","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/3/2022-06-10_3-4_%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F/#_1","title":"\u4e8c\u7ef4\u6570\u7ec4\u521d\u59cb\u5316","text":"<pre><code>vector&lt;vector&lt;int&gt;&gt; res(n, vector&lt;int&gt;(n, 0))\n</code></pre>"},{"location":"CodeThinker/3/2022-06-10_3-4_%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F/#_2","title":"\u4e09\u4e2a\u6a21\u5757\u7684\u53d8\u91cf\uff1a","text":"<ol> <li>\u5faa\u73af\u91cf <code>loop</code></li> <li>\u5b9a\u4f4d\u8f85\u52a9\u91cf <code>startx</code>\uff08\u884c\u5b9a\u4f4d\u8f85\u52a9\uff09<code>starty</code>\uff08\u5217\u5b9a\u4f4d\u8f85\u52a9\uff09 <code>mid</code>\uff08\u4e2d\u95f4\u5143\u7d20\u4f4d\u7f6e\uff09<code>offset</code>\uff08\u7f29\u8fdb\uff09</li> <li>\u5e95\u5c42\u6267\u884c\u76f4\u5f15\u91cf <code>i</code>\uff08\u884c\u53f7\uff09<code>j</code>\uff08\u5217\u53f7\uff09<code>count</code>\uff08\u8ba1\u6570\u586b\u5145\uff09</li> </ol>"},{"location":"CodeThinker/3/2022-06-10_3-4_%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F/#_3","title":"\u4e24\u7c7b\u7b26\u53f7\u4e34\u754c","text":"<ol> <li>\u884c\u4ece\u5de6\u5411\u53f3\u548c\u5217\u4ece\u4e0a\u5411\u4e0b\u65f6\uff1a<code>&lt;</code></li> <li>\u884c\u4ece\u53f3\u5411\u5de6\u548c\u5217\u4ece\u4e0b\u5411\u4e0a\u65f6\uff1a<code>&gt;</code></li> </ol>"},{"location":"CodeThinker/3/2022-06-10_3-4_%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E9%87%8F/#_4","title":"\u6700\u540e\u586b\u5145\u4e2d\u95f4\u91cf","text":"<p>\u6ce8\u610f\uff1a\u6b64\u4ee3\u7801\u8981\u5728\u5faa\u73af\u5916\u3002</p> <pre><code>if (n &amp; 2) {\n    res[mid][mid] = count;`\n}\n</code></pre>"},{"location":"CodeThinker/4/2022-06-13_4-1_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9/","title":"2022-06-13 4-1 \u5220\u9664\u8282\u70b9","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/4/2022-06-13_4-1_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9/#_1","title":"\u4e34\u65f6\u53d8\u91cf\u4fbf\u4e8e\u5220\u9664\u8282\u70b9","text":"<p>\u6211\u4eec\u4f1a\u5728\u66f4\u6539\u5f53\u65f6\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u94fe\u63a5\u524d\u5148\u8bbe\u7acb\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\u7528\u6765\u5b58\u50a8\u8981\u5220\u9664\u7684\u8282\u70b9\u5730\u5740\uff0c\u8fd9\u662f\u4e3a\u4e86\u5728\u540e\u9762\u8c03\u7528 <code>delete</code> \u65f6\u80fd\u627e\u5230\u90a3\u4e2a\u88ab\u6211\u4eec\u201c\u9057\u5f03\u201d\u5728\u5185\u5b58\u91cc\u7684\u5e9f\u5f03\u8282\u70b9\uff0c\u5426\u5219\u6211\u4eec\u65e0\u6cd5\u5220\u6389\u5b83\uff0c\u5b83\u5c31\u771f\u7684\u53d8\u6210\u4e86\u4e00\u4e2a\u201c\u9057\u5f03\u7269\u201d\u4e86\u3002</p>"},{"location":"CodeThinker/4/2022-06-13_4-1_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9/#_2","title":"\u94fe\u8868\u6253\u5370\u4f1a\u51fa\u73b0 <code>%</code>","text":"<p>\u4e0d\u77e5\u9053\u4e3a\u5565\uff0c\u6211\u5199\u4e86\u4e00\u4e2a\u6253\u5370\u51fd\u6570\uff0c\u4f46\u6ca1\u6709\u529e\u6cd5\u6d88\u9664\u6253\u5370\u6700\u540e\u7684 <code>%</code> \u7b26\u53f7\u3002\u4f46\u7ed3\u679c\u662f\u6b63\u786e\u7684\u3002\u6211\u5c1d\u8bd5\u8bbe\u5b9a\u6761\u4ef6\u6765\u68c0\u67e5\u6bcf\u4e2a\u8282\u70b9\u7684\u6709\u6548\u6027\uff0c\u4f46\u8fd8\u662f\u4e0d\u884c\u3002</p>"},{"location":"CodeThinker/4/2022-06-27_4-2_%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/","title":"2022-06-27 4-2 \u8bbe\u8ba1\u94fe\u8868","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/4/2022-06-27_4-2_%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/#mylinkedlist","title":"\u5b9a\u4e49\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 <code>MyLinkedList()</code>","text":"<p>\u8bbe\u5b9a\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u8282\u70b9\uff0c\u5e76\u8d4b\u503c\u4e3a0\uff1b\u5b9a\u4e49\u6b64\u7c7b\u7684 <code>_size</code> \u4e3a0\uff0c\u5373\u65b0\u5efa\u94fe\u8868\u957f\u5ea6\u4e3a0/\u65e0\u8282\u70b9\u3002</p>"},{"location":"CodeThinker/4/2022-06-27_4-2_%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/#index-index","title":"\u5faa\u73af\u7528 <code>index--</code> \u800c\u4e0d\u662f <code>--index</code>","text":"<p>\u5982\u679c\u7528 <code>--index</code> \uff0c\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\uff08\u6211\u597d\u50cf\u6ca1\u9677\u5165\u2026\u2026\uff09\u3002</p> <p>\u2026\u2026</p>"},{"location":"CodeThinker/4/2022-06-28_4-3_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","title":"2022-06-28 4-3 \u53cd\u8f6c\u94fe\u8868","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/4/2022-06-28_4-3_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_1","title":"\u5c06\u7ed3\u6784\u4f53\u653e\u5728\u5168\u5c40\u6765\u64cd\u4f5c\u66f4\u65b9\u4fbf\u4e9b","text":"<p>\u4fbf\u4e8emain\u51fd\u6570\u8c03\u7528\u7ed3\u6784\u4f53\u53ca\u5176\u6784\u9020\u51fd\u6570\uff5e</p>"},{"location":"CodeThinker/4/2022-06-28_4-3_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_2","title":"\u53cc\u6307\u9488\u6cd5","text":"<p><code>pre</code> \uff1a\u524d\u4e00\u4e2a\u8282\u70b9</p> <p><code>cur</code> \uff1a\u8981\u53cd\u8f6c\u7684\u5f53\u524d\u8282\u70b9</p> <p><code>temp</code> \uff1a<code>cur</code> \u7684\u6b63\u5e8f\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53cd\u8f6c\u65f6\u65ad\u5f00\u94fe\u63a5\uff0c\u5219\u9700\u8981\u6211\u4eec\u5b58\u50a8\u5176\u6307\u9488\u5730\u5740\u3002</p> <p>\u5177\u4f53\u903b\u8f91\u4e3a\uff1a</p> <ul> <li><code>cur-&gt;next</code> \u6307\u5411 <code>pre</code> (\u53cd\u8f6c\u64cd\u4f5c)</li> <li><code>pre</code> \u6307\u5411 <code>cur</code> \uff0c <code>cur</code> \u6307\u5411 <code>temp(cur-&gt;next)</code> \uff08\u8fed\u4ee3\u64cd\u4f5c\uff09</li> </ul>"},{"location":"CodeThinker/4/2022-07-01_4-4_%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/","title":"2022-07-01 4-4 \u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/4/2022-07-01_4-4_%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/#_1","title":"\u5feb\u6162\u6307\u9488\u6cd5","text":"<p>\u5012\u6570\u51e0\u4e2a\uff0c\u5feb\u6307\u9488\u5c31\u5feb\u8d70\u51e0\u6b65\uff1b</p> <p>\u4e4b\u540e\u5feb\u6162\u6307\u9488\u4e00\u8d77\u8d70\uff0c\u6162\u6307\u9488\u4e0b\u4e00\u4e2a\u5c31\u6b63\u597d\u6307\u5411\u8981\u5220\u9664\u7684\u8282\u70b9\u4e86\u3002</p>"},{"location":"CodeThinker/4/2022-07-12_4-5_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/","title":"2022-07-12 4-5 \u73af\u5f62\u94fe\u8868","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/4/2022-07-12_4-5_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/#_1","title":"\u53cc\u6307\u9488\u6cd5\u5bfb\u627e\u73af\u5f62\u94fe\u8868\u5165\u53e3","text":"<p>\u6211\u7528\u66f4\u76f4\u89c2\u7684\u65b9\u5f0f\u6765\u7406\u89e3\u7684\u8bdd\uff0c\u6839\u636e\u4e66\u4e0a\u56fe4-23\uff0c<code>fast</code> \u6bd4 <code>slow</code> \u591a\u8d70\u4e86 <code>n</code> \u5708\uff0c\u7136\u800c\u5176\u5728\u73af\u8868\u4e2d\u7684\u5927\u95f4\u9694\u5373\u7b49\u4e8e <code>head</code> \u5230\u5165\u53e3\u7684\u8ddd\u79bb\u3002\u6b64\u65f6\u518d\u7528\u4e24\u4e2a <code>index</code> \u6765\u8dd1\u4e00\u904d\u5373\u53ef\u5f97\u51fa\u5165\u53e3\u5730\u5740\u3002</p>"},{"location":"CodeThinker/4/2022-07-12_4-5_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/#fast-slow-1","title":"\u600e\u6837\u5224\u65ad <code>fast</code> \u548c <code>slow</code> \u7684\u6b65\u957f\u5dee\u4e3a1\uff1f","text":"<p>\u4e3e\u5012\u6570\u7b2c\u4e00\u6b21\u79fb\u52a8\u7684\u60c5\u51b5\u5373\u53ef\u3002</p>"},{"location":"CodeThinker/5/2022-08-07_5-1/","title":"2022-08-07 501 \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/5/2022-08-07_5-1/#_1","title":"\u54c8\u5e0c\u6cd5\u5f00\u7bc7","text":"<p>\u5f53\u6211\u4eec\u9700\u8981\u5feb\u901f\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u51fa\u73b0\u5728\u96c6\u5408\u4e2d\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u8981\u8003\u8651\u4f18\u5148\u4f7f\u7528\u54c8\u5e0c\u6cd5\u3002</p>"},{"location":"CodeThinker/5/2022-08-07_5-1/#_2","title":"\u591a\u6587\u4ef6\u7f16\u8bd1\u521d\u63a2","text":"<p>\u672c\u6b21\u9898\u89e3\u91c7\u7528\u591a\u6587\u4ef6\u7f16\u8bd1\u94fe\u63a5\u751f\u6210\u7684\u65b9\u5f0f\uff0c\u6709\u5229\u4e8e\u6838\u5fc3\u4ee3\u7801\u4e0e\u5176\u4ed6\u4ee3\u7801\u5206\u79bb\uff0c\u65e2\u53ef\u4ee5\u6ee1\u8db3Leetcode\u683c\u5f0f\u5bf9\u7b97\u6cd5\u7684\u4e13\u6ce8\uff0c\u8fd8\u5305\u542b\u4e86\u5b8c\u6574\u8fd0\u884c\u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u3002</p> <p></p>"},{"location":"CodeThinker/5/2022-10-06_5-2/","title":"2022-10-06 5-2 \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/5/2022-10-06_5-2/#vector","title":"vector\u7684\u6253\u5370","text":"<p><code>vector\uff08\u5411\u91cf\u5bb9\u5668\uff09</code>\u5185\u5b9a\u4e49\u4e86\u76f8\u5e94\u7684<code>iterator</code>\uff0c\u5373\u8fed\u4ee3\u5668\u3002\u4f7f\u7528<code>iterator</code>\u53ef\u4ee5\u68c0\u67e5\u5bb9\u5668\u5185\u5143\u7d20\uff0c\u5e76\u5b9e\u73b0\u5143\u7d20\u7684\u904d\u5386\u3002</p> <p>\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u6253\u5370\u5411\u91cf\u5bb9\u5668\u5185\u7684\u5143\u7d20\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>void printV(vector&lt;int&gt; nums) {\n    for (vector&lt;int&gt;::iterator it = nums.begin(); it != nums.end(); it++) {\n        cout &lt;&lt; it &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"CodeThinker/5/2022-10-06_5-2/#_1","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5148\u5c06<code>nums1</code>\u8f6c\u5316\u4e3a<code>unordered_set</code>\u7c7b\u578b\u7684\u5bb9\u5668\uff0c\u4e4b\u540e\u901a\u8fc7\u5bb9\u5668\u81ea\u5e26\u51fd\u6570<code>find()</code>\u5bf9<code>nums1</code>\u8fdb\u884c\u67e5\u627e\u64cd\u4f5c\uff0c\u5bf9<code>nums2</code>\u904d\u5386\u6bd4\u8f83\u3002</p> <p>\u6bd4\u8f83\u7684\u7ed3\u679c\u5b58\u653e\u5728\u65b0\u5efa\u7684<code>unordered_set</code>\u53d8\u91cf<code>result_set</code>\u4e2d\uff0c\u5e76\u8fd4\u56de\u6574\u4e2a\u53d8\u91cf\u3002</p>"},{"location":"CodeThinker/5/2022-10-06_5-2/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u65f6\u6253\u5370\u51fd\u6570\u63a5\u6536\u7684\u662f\u6574\u4e2a\u53d8\u91cf\uff0c\u6545\u63a5\u53e3\u4e0d\u80fd\u4e3areference\uff08\u5f15\u7528\uff09\u3002</p> <p>\u4e3b\u51fd\u6570\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u3002</p> <p>\u5168\u90e8\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>/* LeetCode Question No.349\n * Given two integer arrays `nums1` and `nums2`, return an array of their\n * intersection. Each element in the result must be unique and you may return\n * the result in any order.\n */\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_set&gt;\n\nusing namespace std;\n\nclass Solution {\npublic: \n    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2){\n        unordered_set&lt;int&gt; result_set;\n        unordered_set&lt;int&gt; nums_set(nums1.begin(), nums1.end());\n        for (int num : nums2) {\n            // \u53d1\u73b0nums2\u7684\u5143\u7d20\u5728nums_set\u4e2d\u51fa\u73b0\u8fc7\n            if (nums_set.find(num) != nums_set.end()) {\n                result_set.insert(num);\n            }\n        }\n        return vector&lt;int&gt;(result_set.begin(), result_set.end());\n    }\n    void printV(vector&lt;int&gt; nums){\n        for (vector&lt;int&gt;::iterator it = nums.begin(); it != nums.end(); it++) {\n            cout &lt;&lt; *it &lt;&lt; \" \";\n        }   \n        cout &lt;&lt; endl;\n    }\n};\n\nint main(void){\n    vector&lt;int&gt; nums1 = {1, 2, 2, 1};\n    vector&lt;int&gt; nums2 = {2, 3, 4};\n\n    Solution sl;\n\n    sl.printV(sl.intersection(nums1, nums2));\n    return 0;\n}\n</code></pre>"},{"location":"CodeThinker/5/2022-10-09_5-3/","title":"2022-10-09 \u4e24\u6570\u4e4b\u548c","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/5/2022-10-09_5-3/#map","title":"<code>map</code>\u7684\u7ed3\u6784","text":"<p><code>map</code>\u662f\u4e00\u79cd<code>&lt;key,value&gt;</code>\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u53ef\u4ee5\u7528<code>key</code>\u4fdd\u5b58\u6570\u503c\uff0c\u7528<code>value</code>\u4fdd\u5b58\u6570\u503c\u6240\u5728\u7684\u4e0b\u6807\u3002</p> <p>\u63d2\u5165\u64cd\u4f5c\uff1a <pre><code>map.insert(pair&lt;int,int&gt;(nums[i], i));\n</code></pre></p>"},{"location":"CodeThinker/5/2022-10-09_5-3/#iter","title":"<code>iter</code>\u6307\u9488","text":"<p>\u5728<code>&lt;key,value&gt;</code>\u7ed3\u6784\u4e2d\uff0c<code>iter</code>\u6307\u9488\u7684\u610f\u4e49\uff1a</p> <pre><code>iter-&gt;first     // key\niter-&gt;second    // value\n</code></pre>"},{"location":"CodeThinker/5/2022-10-09_5-3/#_1","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5229\u7528<code>&lt;key,value&gt;</code>\u7684\u7ed3\u6784\u7279\u6027\u52a0\u4e0a<code>unordered_map</code>\u7684\u5e95\u5c42\u5b9e\u73b0\u7279\u6027\uff08<code>hash table</code>\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5148\u67e5\u627e\u540e\u63d2\u5165\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u641c\u7d22\u5339\u914d\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002 </p>"},{"location":"CodeThinker/5/2022-10-09_5-3/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>/* LeetCode Question No.1\n * Given an array of integers `nums` and an integer `target`, return indices of\n * the two numbers such that they add up to `target`.\n * You may assume that each input would have exactly one solution, and you may\n * not use the same element twice.\n * You can return the answer in any order.\n */\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        // The storage arch of `map` is &lt;key,value&gt;,\n        // which save number-value with `key`,\n        // and save index with `value`.\n        std::unordered_map &lt;int, int&gt; map;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            auto iter = map.find(target - nums[i]);\n            if (iter != map.end()) {\n                return {iter-&gt;second, i};   // iter-&gt;first is key;\n                                            // iter-&gt;second is value;\n            }\n            // insert a pair of integer values into the map\n            map.insert(pair&lt;int,int&gt;(nums[i], i));\n        }\n        return {};\n    }\n    void printV(vector&lt;int&gt; nums){\n        for (vector&lt;int&gt;::iterator it = nums.begin(); it != nums.end(); it++) {\n            cout &lt;&lt; *it &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n};\n\nint main(void){\n    vector&lt;int&gt; nums = {1, 2, 3, 4, 5};\n    int target = 0;\n\n    Solution sl;\n\n    cout &lt;&lt; \"0\\t1\\t2\\t3\\t4\\t\" &lt;&lt; endl &lt;&lt; \"1\\t2\\t3\\t4\\t5\\t\" &lt;&lt; endl;\n    cout &lt;&lt; \"Please return your target smaller than 9: \";\n    cin &gt;&gt; target;\n\n    sl.printV(sl.twoSum(nums, target));\n}\n</code></pre>"},{"location":"CodeThinker/5/2022-11-23_5-4/","title":"2022-11-23 \u56db\u6570\u76f8\u52a0","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/5/2022-11-23_5-4/#unordered_map","title":"<code>\u6b21\u6570</code>\u7c7b\u7684\u76f8\u52a0\u5c31\u53ef\u4ee5\u7528<code>unordered_map</code>\u6765\u7edf\u8ba1\u3002","text":""},{"location":"CodeThinker/5/2022-11-23_5-4/#_1","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u5b9a\u4e49\u4e00\u4e2a<code>unordered_map</code>\uff0c<code>key</code> \u4e3a <code>a</code>\u548c <code>b</code> \u4e24\u6570\u4e4b\u548c\uff0c <code>value</code> \u4e3a <code>a</code> \u548c <code>b</code> \u4e24\u6570\u4e4b\u548c\u51fa\u73b0\u7684\u6b21\u6570</li> <li>\u904d\u5386A\u3001B\u6570\u7ec4\uff0c\u7edf\u8ba1\u4e24\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u4e4b\u548c\u53ca\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u653e\u5230 <code>map</code> \u4e2d</li> <li>\u5b9a\u4e49int\u7c7b\u578b\u7684\u53d8\u91cf <code>count</code>\uff0c \u7528\u6765\u7edf\u8ba1<code>a+b+c+d==0</code> \u51fa\u73b0\u7684\u6b21\u6570</li> <li>\u5728\u904d\u5386C\u3001D\u6570\u7ec4\u65f6\uff0c\u5982\u679c <code>0-(c+d)</code> \u5728 map \u4e2d\u51fa\u73b0\uff0c\u5c31\u662f\u7528 <code>count</code> \u7edf\u8ba1 <code>map</code> \u4e2d <code>key</code> \u5bf9\u5e94\u7684 <code>value</code>\uff0c\u5373\u4e24\u6570\u4e4b\u548c\u51fa\u73b0\u7684\u6b21\u6570</li> <li>\u8fd4\u56de\u7edf\u8ba1\u503c <code>count</code></li> </ol>"},{"location":"CodeThinker/5/2022-11-23_5-4/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>/* LeetCode Question No.454\n * Given four integer arrays `nums1`, `nums2`, `nums3` and `nums4` all of length\n * `n`, return the number of tuples (i, j, k, l) such that:\n * `0 &lt;= i, j, k, l &lt; n`\n * `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`\n */\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n\nusing namespace std;\n\nclass Solution {\npublic: \n    int fourSumCount(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B, \n                     vector&lt;int&gt;&amp; C, vector&lt;int&gt;&amp; D)\n    {\n        unordered_map&lt;int, int&gt; umap;   // key: a+b\u7684\u6570\u503c\n                                        // value: a+b\u6570\u503c\u51fa\u73b0\u7684\u6b21\u6570    \n\n        // \u904d\u5386A\u3001B\u6570\u7ec4\uff0c\u7edf\u8ba1\u4e24\u4e2a\u6570\u7ec4\u5143\u7d20\u4e4b\u548c\u53ca\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u653e\u5230map\u4e2d\n        for (int a : A) {\n            for (int b : B) {\n                umap[a + b] ++;\n            }\n        }\n        int count = 0;  // \u7edf\u8ba1a+b+c+d=0\u51fa\u73b0\u7684\u6b21\u6570\n\n        // \u5728\u904d\u5386C\u3001D\u6570\u7ec4\u65f6\uff0c\u5982\u679c 0-(c+d) \u5728 map \u4e2d\u51fa\u73b0\u8fc7\uff0c\n        // \u5c31\u7edf\u8ba1 map \u4e2d key \u5bf9\u5e94\u7684 value\uff0c\u5373\u4e24\u6570\u4e4b\u548c\u51fa\u73b0\u7684\u6b21\u6570\n        for (int c : C) {\n            for (int d : D) {\n                if (umap.find(0 - (c + d)) != umap.end()) {\n                    count += umap[0 - (c + d)];\n                }\n            }\n        }\n        return count;\n    }\n};\n\nint main(void){\n    vector&lt;int&gt; nums1 = {1, 2};\n    vector&lt;int&gt; nums2 = {-2, -1};\n    vector&lt;int&gt; nums3 = {-1, 2}; \n    vector&lt;int&gt; nums4 = {0, 2};\n\n    Solution sl;\n\n    cout &lt;&lt; sl.fourSumCount(nums1, nums2, nums3, nums4) &lt;&lt; endl;    \n}\n</code></pre>"},{"location":"CodeThinker/5/2022-11-24_5-5/","title":"2022-11-24 \u4e09\u6570\u4e4b\u548c","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/5/2022-11-24_5-5/#_1","title":"\u53cc\u6307\u9488\u6cd5\u91cd\u73b0","text":"<p>\u8fd9\u4e00\u9898\u91c7\u7528\u53cc\u6307\u9488\u6cd5\u4f1a\u6bd4<code>hash_map</code> \u8212\u670d\u4e00\u4e9b\u3002</p>"},{"location":"CodeThinker/5/2022-11-24_5-5/#_2","title":"\u6253\u5370\u4e8c\u7ef4\u6570\u7ec4","text":"<p>\u6211\u6309\u7167leetcode\u7684\u683c\u5f0f\u6253\u5370\u4e86\u4e8c\u7ef4\u6570\u7ec4\uff0c\u8bb0\u5f97\u5728\u6bcf\u4e2a\u5143\u7d20/\u5143\u7ec4\u4e4b\u95f4\u52a0\u9017\u53f7\uff0c\u800c\u4e0d\u5728\u6700\u540e\u591a\u6dfb\u52a0\u7684\u6280\u672f\u8981\u70b9\u662f\uff1a\u5728\u8f93\u51fa\u5b8c\u5143\u7d20/\u5143\u7ec4\u540e\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u6253\u5370\u7684\u5143\u7d20/\u5143\u7ec4\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u6253\u5370\u4e00\u4e2a\u9017\u53f7\u3002</p>"},{"location":"CodeThinker/5/2022-11-24_5-5/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>/* LeetCode Question No.15\n * Given an integer array nums, return all the triplets `nums[i], nums[j], \n * nums[k]` such that `i != j`, `i != k`, and `j != k`, and \n * `nums[i] + nums[j] + nums[k] == 0`.\n *\n * Notice that the solution set must not contain duplicate triplets.\n */\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nclass Solution{\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums){\n        vector&lt;vector&lt;int&gt;&gt; result;\n        sort(nums.begin(), nums.end()); // sort() need &lt;algorithm&gt;\n\n        // \u627e\u51fa a+b+c=0\n        // a=nums[i], b=nums[left], c=nums[right]\n\n        for (int i = 0; i &lt; nums.size(); i++){\n\n            // \u6392\u5e8f\u4e4b\u540e\u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5df2\u7ecf\u5927\u4e8e0\uff0c\n            // \u90a3\u4e48\u65e0\u8bba\u5982\u4f55\u7ec4\u5408\u90fd\u4e0d\u53ef\u80fd\u51d1\u6210\u4e09\u5143\u7ec4\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u5c31\u53ef\u4ee5\u4e86 \n            if (nums[i] &gt; 0){\n                return result;\n            }\n\n            // \u6b63\u786e\u7684\u53bb\u91cd\u65b9\u6cd5\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = nums.size() - 1;\n\n            while (right &gt; left) {\n                // \u5982\u679c\u53bb\u91cd\u590d\u903b\u8f91\u653e\u5728\u8fd9\u91cc\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4 left &lt;= right\n                // \u4ece\u800c\u6f0f\u6389\u4e86[0, 0, 0]\u5143\u7ec4\n\n                if (nums[i] + nums[left] + nums[right] &gt; 0) {\n                    right--;\n                } else if (nums[i] + nums[left] + nums[right] &lt; 0) {\n                    left++;\n                } else {\n                    result.push_back(\n                        vector&lt;int&gt;{nums[i], nums[left], nums[right]});\n\n\n                while (right &gt; left &amp;&amp; nums[right] == nums[right-1]) right++;\n                while (right &gt; left &amp;&amp; nums[left] == nums[left+1]) left++;\n\n                // \u627e\u5230\u7b54\u6848\u65f6\uff0c\u53cc\u6307\u9488\u540c\u65f6\u6536\u7f29                \n                right--;\n                left++;\n                }\n            }\n        } \n        return result;\n    }\n    void printV2D(vector&lt;vector&lt;int&gt;&gt;&amp; nums) {\n\n        cout &lt;&lt; \"[\";\n        for (vector&lt;vector&lt;int&gt;&gt;::iterator i = nums.begin(); \n             i != nums.end(); \n             i++){\n\n            cout &lt;&lt; \"[\";\n            for (vector&lt;int&gt;::iterator j = i-&gt;begin();\n                 j != i-&gt;end();\n                 j++){\n                cout &lt;&lt; *j;\n                // \u6bcf\u4e2a\u5143\u7d20\u4e4b\u95f4\u6253\u5370\u4e00\u4e2a\u9017\u53f7\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u6253\u5370\n                if (j != i-&gt;end()-1) cout &lt;&lt; \",\";\n            }\n            cout &lt;&lt; \"]\";\n            // \u6bcf\u4e2a\u5143\u7ec4\u4e4b\u95f4\u6253\u5370\u4e00\u4e2a\u9017\u53f7\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7ec4\u4e0d\u6253\u5370\n            if (i != nums.end()-1) cout &lt;&lt; \",\";\n        }\n        cout &lt;&lt; \"]\" &lt;&lt; endl;\n    }\n};\n\nint main(void){\n    vector&lt;int&gt; nums = {-1, 0, 1, 2, -1, -4};\n    vector&lt;vector&lt;int&gt;&gt; result;\n\n    // cin &gt;&gt; nums;\n\n    Solution sl;\n\n    result = sl.threeSum(nums);\n    sl.printV2D(result);\n}\n</code></pre>"},{"location":"CodeThinker/7/2023-05-01_7-6/","title":"2023-05-01 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p>"},{"location":"CodeThinker/7/2023-05-01_7-6/#_1","title":"\u5206\u6790\u8fc7\u7a0b\uff1a","text":"<p>\u7b80\u5355\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u89e3\u5b9e\u73b0\uff0c\u5176\u6838\u5fc3\u903b\u8f91\u4e3a\uff1a</p> <ul> <li>\u5f53\u8bfb\u53d6\u5230\u975e\u8fd0\u7b97\u7b26\uff1a<ul> <li>\u538b\u5165\u6808</li> </ul> </li> <li>\u5f53\u8bfb\u53d6\u5230\u8fd0\u7b97\u7b26\uff08\u52a0\u51cf\u4e58\u9664\uff09\uff1a<ul> <li>\u53d6\u51fa\u6808\u9876\u4e24\u4e2a\u6570</li> <li>\u505a\u8fd0\u7b97</li> <li>\u8fd0\u7b97\u7ed3\u679c\u538b\u5165\u6808\u9876</li> </ul> </li> <li>\u8fd0\u884c\u5b8c\u6bd5\u65f6\uff0c\u6808\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u6570\uff0c\u5373\u6808\u9876\u4e3a\u8fd0\u7b97\u7ed3\u679c\uff1a<ul> <li>\u6b64\u65f6\u53d6\u51fa\u6808\u9876\u7ed3\u679c</li> <li>\u8fd4\u56de\u7ed3\u679c</li> </ul> </li> </ul>"},{"location":"CodeThinker/7/2023-05-01_7-6/#_2","title":"\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b","text":"<pre><code>/* LeetCode Question No.150*/\n/* code from \u4ee3\u7801\u968f\u60f3\u5f55 */\nclass Solution {\npublic:\n    int evalRPN(vector&lt;string&gt;&amp; tokens) {\n        stack&lt;int&gt; st;\n        for (int i = 0; i &lt; tokens.size(); i++) {\n\n            // \u5f53\u8bfb\u53d6\u5230\u8fd0\u7b97\u7b26\u65f6\n            if (tokens[i] == \"+\" || tokens[i] == \"-\" || tokens[i] == \"*\" || tokens[i] == \"/\") {\n\n                // \u53d6\u51fa\u6808\u9876\u4e24\u4e2a\u6570\n                int num1 = st.top();\n                st.pop();\n                int num2 = st.top();\n                st.pop();\n\n                // \u505a\u5bf9\u5e94\u8fd0\u7b97\uff0c\u5e76\u5c06\u8fd0\u7b97\u7ed3\u679c\u538b\u5165\u6808\u9876\n                if (tokens[i] == \"+\") st.push(num2+num1);\n                if (tokens[i] == \"-\") st.push(num2-num1);\n                if (tokens[i] == \"*\") st.push(num2*num1);\n                if (tokens[i] == \"/\") st.push(num2/num1);\n\n            } else {\n\n                // \u975e\u8fd0\u7b97\u7b26\u538b\u5165\u6808\n                st.push(stoi(tokens[i]));\n            }\n        }\n\n        // \u8fd0\u7b97\u5b8c\u6bd5\uff0c\u53d6\u51fa\u6808\u9876\u7ed3\u679c\n        int result = st.top();\n        st.pop();\n\n        // \u8fd4\u56de\u7ed3\u679c\n        return result;\n    }\n};\n</code></pre>"},{"location":"CodeThinker/7/2023-05-05_7-4/","title":"2023-05-05 \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p> <p>\u4e0b\u56fe\u6765\u81ea\u4ee3\u7801\u968f\u60f3\u5f55\uff1a</p> <p></p> <p>\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u6709\u76f8\u5e94\u7684\u5de6\u62ec\u53f7\u6ca1\u6709\u53f3\u62ec\u53f7\u6765\u5339\u914d\uff0c\u6240\u4ee5return false</p> <p>\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u904d\u5386\u5b57\u7b26\u4e32\u5339\u914d\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u6808\u91cc\u6ca1\u6709\u8981\u5339\u914d\u7684\u5b57\u7b26\u3002\u6240\u4ee5return false</p> <p>\u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a\u904d\u5386\u5b57\u7b26\u4e32\u5339\u914d\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6808\u5df2\u7ecf\u4e3a\u7a7a\u4e86\uff0c\u6ca1\u6709\u5339\u914d\u7684\u5b57\u7b26\u4e86\uff0c\u8bf4\u660e\u53f3\u62ec\u53f7\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5de6\u62ec\u53f7return false</p> <pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        if (s.size() % 2 != 0) return false;\n        stack&lt;char&gt; st;\n        for (int i = 0; i &lt; s.size(); i++) {\n            if(s[i] == '(') st.push(')');\n            else if (s[i] == '[') st.push(']');\n            else if (s[i] == '{') st.push('}');\n\n            else if (st.empty() // \u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a\u53f3\u62ec\u53f7\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u5de6\u62ec\u53f7\n                     || st.top() != s[i]) return false; // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u6808\u91cc\u6ca1\u6709\u6211\u4eec\u8981\u5339\u914d\u7684\u5b57\u7b26\n            else st.pop(); // st.top() \u4e0e s[i] \u76f8\u7b49\uff0c\u6808\u5f39\u51fa\u5143\u7d20\uff1b\n         }\n         // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u6709\u76f8\u5e94\u7684\u5de6\u62ec\u53f7\u6ca1\u6709\u53f3\u62ec\u53f7\u6765\u5339\u914d\n         return st.empty();\n    }\n};\n</code></pre>"},{"location":"CodeThinker/7/2023-05-07_7-5/","title":"2023-05-06 \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u76f8\u90bb\u91cd\u590d\u9879","text":"<p>\u529b\u6263\u9898\u76ee\uff1aLink</p> <p></p> <pre><code>class Solution {\npublic:\n    string removeDuplicates(string s) {\n        stack&lt;char&gt; st;\n        for (char S : s) {\n            if (st.empty() || S != st.top()){\n                st.push(S);\n            } else {\n                st.pop();\n            }\n        }\n        string result = \"\";\n        while (!st.empty()) {\n            result += st.top();\n            st.pop();\n        }\n        reverse(result.begin(), result.end());\n        return result;\n    }\n};\n</code></pre>"},{"location":"CodeThinker/7/2023-05-07_7-5/#_1","title":"\u611f\u53d7","text":"<p>\u5b66\u5b8c\u7f57\u7d20\u54e5\u7684\u6570\u636e\u7ed3\u6784\u8bfe\u4e4b\u540e\u518d\u6765\u7ec3\u4e60\u7b97\u6cd5\u9898\uff0c\u55ef\uff0c\u611f\u89c9\u90fd\u770b\u5f97\u61c2\u4e86\u3002</p> <p>Magic\uff01</p>"},{"location":"old/2021-08-03_Uva1585%2CScore/2021-08-03_Uva1585%2CScore/","title":"Uva1585,Score","text":"<p>2021-08-03_Uva1585,Score</p> <p></p> <p>My problem-thinking idea:</p> <p></p> <p>My Answer:</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\nusing namespace std;\nint main() {\n\n    int n;\n    int ctr, score;\n    bool tmp_st;\n    char s[80];\n\n    scanf(\"%d\",&amp;n);\n    while (n--) {\n        ctr = 0;\n        score = 0;\n        tmp_st = false;\n        scanf(\"%s\", s);\n        for (int i = 0; i &lt; strlen(s); i++) {\n            if (tmp_st) {\n                if (s[i] == 'X') { tmp_st = false; ctr = 0; }\n                if (s[i] == 'O') { ctr = 1; score += ctr; }\n            }\n            else {\n                if (s[i] == 'X') { tmp_st = false; ctr = 0; }\n                if (s[i] == 'O') { ctr++; score += ctr; }\n            }\n        }\n        cout &lt;&lt; score &lt;&lt; endl;\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"old/2021-08-04_Uva272%2CTex_Quotes/2021-08-04_Uva272%2CTex_Quotes/","title":"Uva272,Tex_Quotes","text":"<p>2021-08-04_Uva272,Tex_Quotes</p> <p></p> <p></p> <p>My problem-thinking idea:</p> <p></p> <p>My Answer:</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main() {\n    int c, q = 1;\n    while ((c = getchar()) != EOF) {\n        if (c == '\"') {\n            printf(\"%s\", q ? \"``\" : \"''\"); \n            q = !q;\n        }\n        else\n        {\n            printf(\"%c\", c);\n        } \n    }\n    return 0;\n}\n</code></pre>"},{"location":"old/2021-08-11_Uva1583%2CDigit_Generator/2021-08-11_Uva1583%2CDigit_Generator/","title":"Uva1583,Digit_Generator","text":""},{"location":"old/2021-08-11_Uva1583%2CDigit_Generator/2021-08-11_Uva1583%2CDigit_Generator/#2021-08011_uva1583digit_generator","title":"2021-08011_Uva1583,Digit_Generator","text":"<p>My Answer:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#define maxn 100005\nint ans[maxn];\n\nint main() {\n\n    int T, n;\n    memset(ans, 0, sizeof(ans));\n\n    for (int m = 1; m &lt; maxn; m++) {\n        int x = m, y = m;\n        while (x &gt; 0) {\n            y += x % 10;\n            x /= 10;\n        }\n        if (ans[y] == 0 || m &lt; ans[y]) {\n            ans[y] = m;\n        }\n    }\n\n    scanf_s(\"%d\", &amp;T);\n    while (T--) {\n        scanf_s(\"%d\", &amp;n);\n        printf(\"%d\\n\", ans[n]);\n    }\n\n\n    return 0;\n}\n</code></pre> <p>My Notes:</p> <p>This is a really simple and classical problem by using table-driven approach, it's not hard. But I learn a new function <code>memset()</code>, which can initialize each element of a huge array. And what I need to focus is that the huge array need to be defined outside the main function. It can make the main function run easier.</p>"},{"location":"old/2021-08-12_Uva1584%2CCircular_Sequence/2021-08-12_Uva1584%2CCircular_Sequence/","title":"Uva1584,Circular_Sequence","text":""},{"location":"old/2021-08-12_Uva1584%2CCircular_Sequence/2021-08-12_Uva1584%2CCircular_Sequence/#2021-08011_uva1583digit_generator","title":"2021-08011_Uva1583,Digit_Generator","text":"<p>My Answer:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#define maxn 105\n\nint less(const char* s, int p, int q) {\n    int n = strlen(s);\n    for (int i = 0; i &lt; n; i++) {\n        if (s[(p + i) % n] != s[(q + i) % n])\n            return s[(p + i) % n] &lt; s[(q + i) % n];\n    }\n    return 0;\n}\n\nint main() {\n    int T;\n    char s[maxn];\n    scanf(\"%d\", &amp;T);\n    while (T--) {\n        scanf(\"%s\", s);\n        int ans = 0;\n        int n = strlen(s);\n        for (int i = 1; i &lt; n; i++) {\n            if (less(s, i, ans)) ans = i;\n        }\n        for (int i = 0; i &lt; n; i++) {\n            putchar(s[(i + ans) % n]);\n        }\n        putchar('\\n');\n    }\n    return 0;\n}\n</code></pre> <p>My Notes:</p> <p>There are three points I've learned:</p> <ol> <li> <p>The usage of <code>const</code>:</p> <ol> <li> <p>if <code>const</code> modified <code>var</code>, the <code>var.value()</code> will not be allowed to change.</p> <p>Like this:</p> <pre><code>const int i = 5;    //true\ni = 6;      //the val of 'i' can't be changed.\n</code></pre> </li> <li> <p>if <code>const</code> modified <code>ptr</code>, the <code>ptr.address()</code> will not be allowed to change.</p> <p>Like this:</p> <pre><code>char* const p = &amp;a;     //true\np = &amp;b;     //the addr of 'p' can't be changed.\n</code></pre> </li> <li> <p>Both usages can use together.</p> </li> </ol> </li> <li> <p>If I want to get the length of a string, I can use <code>strlen()</code> in <code>&lt;string.h&gt;</code> (May be for a long time).</p> </li> <li> <p>In a circulus array, an effective method to traverse it is using <code>mod() or &amp;</code>.</p> </li> </ol>"},{"location":"old/2021-08-14_Uva1586%2CMolar_Mass/2021-08-14_Uva1586%2CMolar_Mass/","title":"Uva1586,Molar_Mass","text":""},{"location":"old/2021-08-14_Uva1586%2CMolar_Mass/2021-08-14_Uva1586%2CMolar_Mass/#2021-08-14_uva1586molar_mass","title":"2021-08-14_Uva1586,Molar_Mass","text":"<p>My problem-thinking idea:</p> <p></p> <p>My Answer:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iomanip&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\ndouble scores[200];\n\nint main() {\n\n    scores['C'] = 12.01;\n    scores['H'] = 1.008;\n    scores['O'] = 16.00;\n    scores['N'] = 14.01;\n\n    int n;\n    int i, j;\n    int curNum;\n    int len;\n    double sum = 0;\n    string s;\n\n    cin &gt;&gt; n;\n\n    while (n--) {\n        sum = 0;\n        cin &gt;&gt; s;\n        len = s.length();\n\n        for (i = 0; i &lt; len;) {\n            if (!isdigit(s[i])) {\n\n                if (i + 1 &lt; len &amp;&amp; isdigit(s[i+1])) {\n                    sum += scores[s[i]];\n                    i++;\n                }\n                else if (i + 1 &lt; len &amp;&amp; !isdigit(s[i + 1])) {\n                    for (j = i + 1; j &lt; len &amp;&amp; isdigit(s[j]); ++j);\n                    curNum = stoi(s.substr(i+1, j - (i+1)));\n                    sum += curNum * scores[s[i]];\n                    i = j;                  \n                }\n                else {\n                    sum += scores[s[i]];\n                    i++;\n                }\n            }\n        }\n        cout &lt;&lt; fixed &lt;&lt; setprecision(3) &lt;&lt; sum &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> <p>My Notes:</p> <p>There are three points I've learned:</p> <ol> <li> <p>We should use the <code>index</code> of array more flexible, LIKE this:</p> <pre><code>double scores[200];     // Although some memory space is wasted, but it's really make program processing faster~\n...\nscores['C'] = 12.01;    //Easy to store information~\n...\nif (i + 1 &lt; len &amp;&amp; isdigit(s[i+1])) //Convenient to predict~\nsum += scores[s[i]];    //Easy to locate~\n</code></pre> </li> <li> <p>There are 3 functions:</p> <p><code>isdigit()</code>: </p> <ul> <li> <p>Intro:</p> <pre><code>int isdigit ( int c );\n</code></pre> <p>Check if character is decimal digit</p> <p>Checks whether c is a decimal digit character.</p> <p>Decimal digits are any of: <code>0 1 2 3 4 5 6 7 8 9</code></p> <p>For a detailed chart on what the different <code>ctype</code> functions return for each character of the standard ASCII character set, see the reference for the <code>&lt;cctype&gt;</code>header.</p> <p>In C++, a locale-specific template version of this function (isdigit) exists in header <code>&lt;locale&gt;</code>.</p> </li> <li> <p>Parameters:</p> <p>Character to be checked, casted to an int, or EOF.</p> </li> <li> <p>Return Value:</p> <p>A value different from zero (i.e., <code>true</code>) if indeed c is a decimal digit. Zero (i.e., <code>false</code>) otherwise.</p> </li> <li> <p>Example:</p> <pre><code>/* isdigit example */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;ctype.h&gt;\nint main ()\n{\n  char str[]=\"1776ad\";\n  int year;\n  if (isdigit(str[0]))\n  {\n    year = atoi (str);\n    printf (\"The year that followed %d was %d.\\n\",year,year+1);\n  }\n  return 0;\n}\n</code></pre> </li> </ul> <p><code>substr()</code>:</p> <ul> <li> <p>Intro:</p> <pre><code>string substr (size_t pos = 0, size_t len = npos) const;\n</code></pre> <p>Generate substring</p> <p>Returns a newly constructed string object with its value initialized to a copy of a substring of this object.</p> <p>The substring is the portion of the object that starts at character position pos and spans len characters (or until the end of the string, whichever comes first).</p> </li> <li> <p>Parameters:</p> <ul> <li> <p>pos:</p> <p>Position of the first character to be copied as a substring. If this is equal to the string length, the function returns an empty string. If this is greater than the string length, it throws out_of_range. Note: The first character is denoted by a value of <code>0</code> (not <code>1</code>).</p> </li> <li> <p>len:</p> <p>Number of characters to include in the substring (if the string is shorter, as many characters as possible are used). A value of string::npos indicates all characters until the end of the string.</p> </li> </ul> </li> <li> <p>Return Value:</p> <p>A string object with a substring of this object.</p> </li> <li> <p>Example:</p> <pre><code>// string::substr\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main ()\n{\n  std::string str=\"We think in generalities, but we live in details.\";\n                                           // (quoting Alfred N. Whitehead)\n\n  std::string str2 = str.substr (3,5);     // \"think\"\n\n  std::size_t pos = str.find(\"live\");      // position of \"live\" in str\n\n  std::string str3 = str.substr (pos);     // get from \"live\" to the end\n\n  std::cout &lt;&lt; str2 &lt;&lt; ' ' &lt;&lt; str3 &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> </li> </ul> <p><code>stoi()</code>:</p> <ul> <li> <p>Intro:</p> <pre><code>int stoi (const string&amp;  str, size_t* idx = 0, int base = 10);\nint stoi (const wstring&amp; str, size_t* idx = 0, int base = 10);\n</code></pre> <p>Convert string to integer</p> <p>Parses str interpreting its content as an integral number of the specified base, which is returned as an <code>int</code> value.</p> <p>If idx is not a null pointer, the function also sets the value of idx to the position of the first character in str after the number.</p> <p>The function uses strtol (or wcstol) to perform the conversion (see strtol for more details on the process).</p> </li> <li> <p>Parameters:</p> <ul> <li> <p>str</p> <p>String object with the representation of an integral number.</p> </li> <li> <p>idx</p> <p>Pointer to an object of type size_t, whose value is set by the function to position of the next character in str after the numerical value. This parameter can also be a null pointer, in which case it is not used.</p> </li> <li> <p>base</p> <p>Numerical base (radix) that determines the valid characters and their interpretation. If this is <code>0</code>, the base used is determined by the format in the sequence (see strtol for details). Notice that by default this argument is <code>10</code>, not <code>0</code>.</p> </li> </ul> </li> <li> <p>Return Value</p> <p>On success, the function returns the converted integral number as an <code>int</code> value.</p> </li> <li> <p>Example</p> <p><pre><code>// stoi example\n#include &lt;iostream&gt;   // std::cout\n#include &lt;string&gt;     // std::string, std::stoi\n\nint main ()\n{\n  std::string str_dec = \"2001, A Space Odyssey\";\n  std::string str_hex = \"40c3\";\n  std::string str_bin = \"-10010110001\";\n  std::string str_auto = \"0x7f\";\n\n  std::string::size_type sz;   // alias of size_t\n\n  int i_dec = std::stoi (str_dec,&amp;sz);\n  int i_hex = std::stoi (str_hex,nullptr,16);\n  int i_bin = std::stoi (str_bin,nullptr,2);\n  int i_auto = std::stoi (str_auto,nullptr,0);\n\n  std::cout &lt;&lt; str_dec &lt;&lt; \": \" &lt;&lt; i_dec &lt;&lt; \" and [\" &lt;&lt; str_dec.substr(sz) &lt;&lt; \"]\\n\";\n  std::cout &lt;&lt; str_hex &lt;&lt; \": \" &lt;&lt; i_hex &lt;&lt; '\\n';\n  std::cout &lt;&lt; str_bin &lt;&lt; \": \" &lt;&lt; i_bin &lt;&lt; '\\n';\n  std::cout &lt;&lt; str_auto &lt;&lt; \": \" &lt;&lt; i_auto &lt;&lt; '\\n';\n\n  return 0;\n}\n</code></pre> - Output:</p> <pre><code>```cpp\n2001, A Space Odyssey: 2001 and [, A Space Odyssey] 40c3:  16579 -10010110001: -1201 0x7f: 127 \n```\n</code></pre> </li> </ul> </li> </ol>"},{"location":"old/2021-08-18_Uva1225%2CDigit_Counting/2021-08-18_Uva1225%2CDigit_Counting/","title":"Uva1225,Digit_Counting","text":""},{"location":"old/2021-08-18_Uva1225%2CDigit_Counting/2021-08-18_Uva1225%2CDigit_Counting/#2021-08-18_uva11225digit_counting","title":"2021-08-18_Uva11225,Digit_Counting","text":"<p>My problem-thinking idea:</p> <p></p> <p>My Answer:</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint ctr[20][10] = { 0 };\nint main() {\n    int N;\n    cin &gt;&gt; N;\n    int row = N;\n    while (N--) {\n        int max = 0;\n        cin &gt;&gt; max;\n        for (int i = 1; i &lt;= max; i++) {\n            for (int j = i; j != 0; j /= 10) {\n                int tmp = j;\n                ctr[N][tmp % 10]++;\n            }\n        }\n    }\n\n    for (int m = row - 1; m &gt;= 0; m--) {\n        for (int n = 0; n &lt; 10; n++) {\n            if (n &lt; 9)\n                cout &lt;&lt; ctr[m][n] &lt;&lt; \" \";\n            else\n                cout &lt;&lt; ctr[m][n];\n        }\n        if (m &gt; 0) cout &lt;&lt; endl; \n    }\n\n    return 0;\n}\n</code></pre> <p>My Notes:</p> <p>There are few experience to be shared:</p> <ol> <li> <p>I can use a fuction <code>memset()</code> from <code>&lt;cstring&gt;</code> to initialize the two-dimentional array.  </p> <p><code>memset()</code>:</p> <ul> <li> <p>Intro:</p> <pre><code>void * memset ( void * ptr, int value, size_t num );\n</code></pre> <p>Fill block of memory</p> <p>Sets the first num bytes of the block of memory pointed by ptr to the specified value (interpreted as an <code>unsigned char</code>).</p> </li> <li> <p>Parameters</p> <p>ptr</p> <p>\u200b   Pointer to the block of memory to fill.</p> <p>value</p> <p>\u200b   Value to be set. The value is passed as an <code>int</code>, but the function fills the block of memory using the unsigned char conversion of this value.</p> <p>num</p> <p>\u200b   Number of bytes to be set to the value. size_t is an unsigned integral type.</p> </li> <li> <p>Return Value</p> <p>ptr is returned.</p> </li> <li> <p>Example</p> <pre><code>/* memset example */\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main ()\n{\n  char str[] = \"almost every programmer should know memset!\";\n  memset (str,'-',6);\n  puts (str);\n  return 0;\n}\n</code></pre> <p>Output:</p> <pre><code> ------ every programmer should know memset! \n</code></pre> </li> </ul> </li> <li> <p>I can use <code>while()</code> to set the number of cycles;</p> </li> <li> <p>The output part can rewritten by using pointer, like this:</p> <pre><code>void print(int* arr, int row, int col) {\n    int row = 0;\n    int col = 0;\n    for (int i = 0; i &lt; row; i++) {\n        for (int j = 0; j &lt; col; j++) {\n                    printf(\"%d \", arr[(i*row) + j); \n        }\n            printf(\"\\n\");\n    }\n}\n</code></pre> </li> <li> <p>Another answer gives me a new idea: use the table-driven method to solve the problem. Of course, this is only feasible when the answer is fixed and finite.</p> </li> </ol>"},{"location":"old/2021-10-28_Merge-Sort/2021-10-28_Merge-Sort/","title":"Merge-Sort","text":""},{"location":"old/2021-10-28_Merge-Sort/2021-10-28_Merge-Sort/#2021-10-28","title":"2021-10-28","text":"<p>Today Learned:</p> <p>\u200b Introduction of Algorithms lecture 1 \u200b (Corresponding to the first and second chapters of the book)</p> <p>Today Exercise:</p> <p>\u200b Merge-Sort(From AOAPC II Page225-226)</p> <p>Source Code:</p> <pre><code>// merge_sort.c\n// author: Rujia Liu, Jerry Zhang (completing the code)\n\n#include &lt;stdio.h&gt;\nvoid merge_sort(int* A, int x, int y, int* T);\n\nint main()\n{\n    int A[10] = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };\n    int T[10] = { 0 };\n    merge_sort(A, 0, 10, T);\n    for (int i = 0; i &lt; 10; i++) printf(\"%d \", A[i]);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid merge_sort(int* A, int x, int y, int* T)\n{\n    if (y-x &gt; 1) {\n        int m = x + (y-x) / 2;\n        int p = x;  // starting index\n        int q = m;  // middle index\n        int i = x;  // counter\n        merge_sort(A, x, m, T);\n        merge_sort(A, m, y, T);\n        while (p &lt; m || q &lt; y) {\n            if (q &gt;= y || (p &lt; m &amp;&amp; A[p] &lt;= A[q])) {\n                T[i++] = A[p++];\n            }\n            else {\n                T[i++] = A[q++];\n            }\n        }\n        for (i = x; i &lt; y; i++) { A[i] = T[i]; }\n    }\n}\n</code></pre> <p>Coding Notes:</p> <p></p>"},{"location":"old/2021-10-29_Inorder-Traversal/2021-10-29_Inorder-Traversal/","title":"Inorder-Traversal","text":""},{"location":"old/2021-10-29_Inorder-Traversal/2021-10-29_Inorder-Traversal/#2021-10-29","title":"2021-10-29","text":"<p>Today Learned:</p> <p>\u200b Introduction of Algorithms lecture 2 \u200b (Corresponding to the 3rd chapters of the book)</p> <p>Today Exercise:</p> <p>\u200b Inorder-Traversal of Binary Tree (From LeetCode)</p> <p>Source Code:</p> <pre><code>void traversal(struct TreeNode* cur, int* rslt, int* resSize)\n{\n    if (!cur) return;\n    traversal(cur-&gt;left, rslt, resSize);\n    rslt[(*resSize)++] = cur-&gt;val;\n    traversal(cur-&gt;right, rslt, resSize);\n}\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n    int* rslt = malloc(sizeof(int)*501);\n    *returnSize = 0;\n    traversal(root, rslt, returnSize);\n    return rslt;\n}\n</code></pre> <p>Coding Notes:</p> <p></p>"},{"location":"old/2021-10-31_Binary-Search/2021-10-31_Binary-Search/","title":"Binary-Search","text":""},{"location":"old/2021-10-31_Binary-Search/2021-10-31_Binary-Search/#2021-10-31","title":"2021-10-31","text":"<p>Today Learned:</p> <p>\u200b Introduction of Algorithms lecture 3 (Not all) \u200b (Corresponding to the 3rd chapters of the book)</p> <p>Today Exercise:</p> <p>\u200b Sqrt(x) (From LeetCode)</p> <pre><code>int mySqrt(int x) {\n    if (x == 0) return 0;\n    if (x == 1) return 1;\n    int left = 0, right = x, res = 0;\n    while (right - left &gt; 1) {\n        int mid = (right - left) / 2 + left;\n        if (x / mid &lt; mid) {\n            right = mid;\n        } else {\n            left = mid;\n            res = left;\n        }\n    }\n    return res;\n}\n</code></pre> <p>Coding Notes:</p> <p></p>"}]}